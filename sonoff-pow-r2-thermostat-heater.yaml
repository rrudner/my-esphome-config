substitutions:
  node_name: sonoff-pow-r2-heater
  device_name: Heater
  device_ip: 10.0.0.187
  sensor_name: bedside_temperature

esphome:
  name: $node_name
  comment: $device_name

esp8266:
  board: esp8285

wifi:
  use_address: $device_ip
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  reboot_timeout: 0s
  ap:
    ssid: $device_name Fallback Hotspot
    password: !secret wifi_ap_password
    ap_timeout: 1min
    
captive_portal:
  
web_server:
  port: 80

logger:
  baud_rate: 0

debug:
  update_interval: 120s

uart:
  rx_pin: RX
  baud_rate: 4800

api:
  reboot_timeout: 0s

  services:
    - service: led_turn_off
      then:
        - light.turn_on: led_1
    
    - service: led_turn_on
      then:
        - light.turn_off: led_1

    - service: thermostat_toggle
      then:
          - if:
              condition:
                lambda: 'return id(thermoheater).action == 0;'
              then:
              - lambda: |-
                  auto call = id(thermoheater).make_call();
                  call.set_mode("HEAT");
                  call.perform();
              else:
              - lambda: |-
                  auto call = id(thermoheater).make_call();
                  call.set_mode("OFF");
                  call.perform();

    - service: set_temp
      variables:
        target_temp: float
      then:
        - lambda: |-
            auto call = id(thermoheater).make_call();
            call.set_target_temperature(target_temp);
            call.perform();
            
ota:

time:
  - platform: homeassistant
    id: homeassistant_time

binary_sensor:
  - platform: gpio
    name: $device_name Button
    pin:
      number: GPIO0
      mode:
        input: true
        pullup: true
      inverted: true
    id: button_1
    on_click:
    - min_length: 50ms
      max_length: 350ms
      then:
          - if:
              condition:
                lambda: 'return id(thermoheater).action == 0;'
              then:
              - lambda: |-
                  auto call = id(thermoheater).make_call();
                  call.set_mode("HEAT");
                  call.perform();
              else:
              - lambda: |-
                  auto call = id(thermoheater).make_call();
                  call.set_mode("OFF");
                  call.perform();
    - min_length: 350ms
      max_length: 1000ms
      then:
        - lambda: |-
                  auto call = id(thermoheater).make_call();
                  call.set_mode("OFF");
                  call.perform();
        - switch.toggle: relay_1

    - min_length: 5s
      max_length: 15s
      then:
        - switch.turn_on: reboot

  - platform: status
    name: $device_name Status

switch:
  - platform: gpio
    id: relay_1
    pin: GPIO12
    name: $device_name
    icon: mdi:radiator
    restore_mode: ALWAYS_OFF

  - platform: restart
    id: reboot
    name: $device_name Restart
    icon: mdi:restart

light:
  - platform: status_led
    id: led_1
    pin: GPIO13
    icon: mdi:led-variant-on

sensor:
  - platform: homeassistant
    id: ${sensor_name}
    entity_id: sensor.${sensor_name}

  - platform: wifi_signal
    name: $device_name WiFi Signal
    update_interval: 60s
    
  - platform: cse7766
    current:
      id: current
      name: $device_name Current
    voltage:
      id: voltage
      name: $device_name Voltage
    power:
      id: power
      name: $device_name Power
    energy:
      id: energy
      filters:
        - multiply: 0.001
      unit_of_measurement: kWh
      name: $device_name Energy
    update_interval: 20s

  - platform: total_daily_energy
    id: daily_energy_usage
    power_id: power
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh
    name: $device_name Total Daily Usage

  - platform: debug
    free:
      name: $device_name Heap Free
    fragmentation:
      name: $device_name Heap Fragmentation
    block:
      name: $device_name Heap Max Block
    loop_time:
      name: $device_name Loop Time

text_sensor:
  - platform: debug
    device:
      name: $device_name Device Info

climate:
  - platform: thermostat
    id: thermoheater
    name: $device_name Thermostat
    sensor: $sensor_name
    visual:
      min_temperature: 18
      max_temperature: 25
      temperature_step: 0.1
    heat_overrun: 0.5
    heat_deadband: 0.0
    min_heating_off_time: 1s
    min_heating_run_time: 1s
    min_idle_time: 1s
    heat_action:
      - switch.turn_on: relay_1
    idle_action:
      - switch.turn_off: relay_1
    preset:
      - name: Home
        default_target_temperature_low: 20
      - name: Sleep
        default_target_temperature_low: 19
      - name: Away
        default_target_temperature_low: 18
    on_state:
      then:
          - if:
              condition:
                lambda: 'return id(thermoheater).action == 0;'
              then:
              - light.turn_on: led_1
              else:
              - light.turn_off: led_1
